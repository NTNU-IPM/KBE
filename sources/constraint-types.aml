;;; An open constraint is a joint with no geometry
;;; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class open-constraint-class
  :inherit-from (master-joint-model)
  :properties (
               )
  )

  
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-male-element
; This element is placed on
;------------------------------------------------------------------------------------------------------------- 
(define-class open-male-element
  :inherit-from (joint-element-model)
  :properties (
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class open-female-element
  :inherit-from (joint-element-model)
  :properties (
			   ;; An open female joint could initially be placed at the wrong place, 
			   ;; depending on the topology of the mechanism. Its sub-frame should
			   ;; then be placed accordingly. The local z coordinate is translated,
			   ;; as that's the direction from the main-frame to the sub-frame.
               z-translation (get-translational-z-value (the superior))
			   (sub-point-ref :class 'sub-point-data-model
                   orientation (list
								(translate (list 0 0 ^z-translation))
                                )
                   )
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
;;Method finding the other joint on member, and then retrieving its max height.
(define-method get-translational-z-value open-female-element ()
	(let (
		  (displayed-member
			(loop for member in !members-connected-to-joint-element
				when (the display? (:from member)) do
				(return member)))
		  )
		 (loop for joint in (get-joints-on-member displayed-member)
			when (not (eq (the) joint)) do
			(return (-(get-max-height joint)))
		  )
	)
)
 
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------  
(define-class rigid-constraint-class
  :inherit-from (master-joint-model)
  :properties (
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class helical-constraint-class
  :inherit-from (master-joint-model)
  :properties (
;;;                joint-variables 'theta or 's
               ;;;                to element
;;;                (temp-element :class 'vector-data-model
;;;                    point-ref  ^^point-ref
;;;                    direction  ^^direction
                   orientation (list
                                  (translate !direction :distance (nth 0 !constraint-variable)) 
                                  )
;;;                    )
               )
  
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class prismatic-constraint-class
  :inherit-from (master-joint-model)
  :properties (
;;;                joint-variables 's
               ;;;                to element
;;;                (temp-element :class 'vector-data-model
;;;                    point-ref  ^^point-ref
;;;                    direction  ^^direction
                   orientation (list
                                  (translate !direction :distance (nth 0 !constraint-variable)) 
                                  )
;;;                    )
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class cylindric-constraint-class
  :inherit-from (master-joint-model)
  :properties (
;;;                joint-variables 'theta and 's
               ;;;                to element
;;;                (temp-element :class 'vector-data-model
;;;                    point-ref  ^^point-ref
;;;                    direction  ^^direction
                   orientation (list
					   (translate !direction :distance (nth 0 !constraint-variable)) 
                                  )
;;;                    )
               )
  )

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------   
(define-class planar-constraint-class
  :inherit-from (master-joint-model)
  :properties (
;;;                joint-variables 's, s' and  theta
 
;;;                (temp-element :class 'vector-data-model
;;;                    orientation (list
;;;                                 (translate
;;;                                  (angle-between-2-vectors (the superior solid-element direction) (nth 0 ^^constraint-variable) )
;;;                                  (cross-product (the superior solid-element direction)  (nth 0 ^^constraint-variable) )
;;;                                  :axis-point (the coordinates (:from (the superior solid-element point-ref)) )
;;;                                  )
;;;                                 )
;;;                    )
               )
  )

;;; Class holding revolute male and female elements on instantiation
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class revolute-constraint-class
  :inherit-from (master-joint-model)
  :properties (
               diameter 0
               ;;; dimensions to make sure connected joints match
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class revolute-male-element
  :inherit-from (joint-element-model)
  :properties (
               union-list (when (and (plusp ^max-width) (plusp ^max-height) )
                            (list ^imprinted-pin ^eye)
                            )
               
			   object-list (list ^imprinted-pin ^eye)
               
			   simplify? nil

			   mating-nodes-distance (/ ^^max-width 2)
			   
			   ;;; Imprinted objects are objects that will receive surface nodes, used for meshing
               (imprinted-pin :class '(tagging-object geometry-with-split-periodic-faces-class)
                   source-object ^^pin
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   )
               
               (pin :class 'cylinder-object
                   reference-object ^main-frame
                   height (* 2 ^^max-height ^^scale-factor)
                   diameter (/ ^^max-width 2)
                   orientation (list
                                (translate (list 0 0 (- (/ ^height 4)) ) )
                                )
                   )
               (eye :class '(tagging-object cylinder-object)
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   reference-object ^sub-frame
                   height ^^max-height
                   diameter ^^max-width
                   )
               (sub-point-ref :class 'sub-point-data-model
                   orientation (list
                                (translate (list 0 0 (/ (- ^^max-height) 1) ))
                                )
                   )
               )
  :subobjects (
               (mating-surface-nodes :class 'mesh-query-nodes-from-interface-class
					mesh-database-object			(get-mesh-model-subobject ^^link-mesh-model-object 'mesh-db)
					interface-object 				(the point-ref (:from ^^main-frame))
					tolerance 						(sqrt (+ (expt (/ (the height (:from ^^pin)) 4) 2) (expt (/ (the diameter (:from ^^pin)) 2) 2)))
					quantity 						nil ;;Collect all nodes within the tolerance
					subset-mesh-query-object-list	(list (get-mesh-model-subobject ^^link-mesh-model-object '2d-elements))
					color 							'green
					display							nil
					)
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 
  
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------   
(define-class revolute-female-element
  :inherit-from (difference-object joint-element-model)
  :properties(
               union-list (when (and (plusp ^max-width) (plusp ^max-height) )
							(list ^fork)
                           )
               difference-list (when (and (plusp ^max-width) (plusp ^max-height) )
                                (list ^imprinted-pin-hole)
                                )
               object-list (list ^fork ^imprinted-pin-hole)
			   
			   (imprinted-pin-hole :class '(tagging-object geometry-with-split-periodic-faces-class)
                   source-object ^^pin-hole
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   )
               
               (pin-hole :class 'cylinder-object
                   reference-object ^main-frame
                   height (* 4 ^^max-height ^^scale-factor)
                   diameter (/ ^^max-width 2)
                   )
                              
               (fork :class '(tagging-object cylinder-object)
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   reference-object ^sub-frame
                   height ^^max-height
                   diameter ^^max-width
                   )

               (sub-point-ref :class 'sub-point-data-model
                   )
               )
  :subobjects (
              
               (mating-surface-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list ^^imprinted-pin-hole)
				   mesh-object (the link-mesh (:from (the link-mesh-model (:from ^link-ref-incident-on-constraint))))
                   color 'green
				   display? nil
                   )
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 
  
;;; Class holding spherical male and female elements on instantiation
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class spheric-constraint-class
  :inherit-from (master-joint-model)
  :properties (
			   orientation (list
							(rotate
							 (angle-between-2-vectors ^direction (nth 0 ^constraint-variable) )
							 (cross-product ^direction (nth 0 ^constraint-variable) )
							 :axis-point (the coordinates (:from ^point-ref) )
							 )
							)
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 
  
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------   
(define-class spheric-male-element
  :inherit-from (union-object joint-element-model)
  :properties (
               tag-dimensions '(1 2 3)
               tag-attributes (list ^^max-element-size ^^min-element-size
                                    0 0.1 0 20.0 1.0e-5)
               union-list (when (and (plusp ^max-width) (plusp ^max-height) )
                            (list ^imprinted-stud ^imprinted-ball ^plate)
                            )
			   object-list (list ^imprinted-stud ^imprinted-ball ^plate)

               (imprinted-stud :class '(tagging-object geometry-with-split-periodic-faces-class)
                   source-object ^^stud
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   )
               (stud :class 'cylinder-object
                   reference-object ^sub-frame
                   height (vector-length (subtract-vectors (the origin (:from ^sub-frame)) (the origin (:from ^main-frame)) ) )
                   diameter (/ (the diameter (:from ^ball)) 2)
                   orientation (list
                                (translate (list 0 0 (/ ^height 2)) )
                                )
                   )
               (imprinted-ball :class '(tagging-object geometry-with-split-periodic-faces-class)
                   source-object ^^ball
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   )
               (ball :class 'sphere-object
                   reference-object ^main-frame
                   diameter (* 3 (/ ^^max-width 4))
                   )
               (plate :class '(tagging-object cylinder-object)
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   reference-object ^^sub-frame
                   diameter ^^max-width
                   height ^^max-height
                   )

               (sub-point-ref :class 'sub-point-data-model
                   orientation (list
                                (translate (list 0 0  (- 0 (/ ^^max-height 2) (* 1 (the diameter (:from ^^ball))) )) )
                                )
                   )
               )
  :subobjects (
               (mating-surface-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list ^^imprinted-ball)
                   mesh-object (the link-mesh (:from (the link-mesh-model (:from ^link-ref-incident-on-constraint))))
                   color 'green
				   display? nil
                   )               
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 
  
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------   
(define-class spheric-female-element
  :inherit-from (difference-object joint-element-model)
  :properties (
               union-list (when (and (plusp ^max-width) (plusp ^max-height) )
                            (list ^imprinted-socket)
                            )
               difference-list (when (and (plusp ^max-width) (plusp ^max-height) )
                                 (list ^imprinted-hole)
                                 )
               object-list (list ^imprinted-socket ^imprinted-hole)

               (imprinted-hole :class '(tagging-object geometry-with-split-periodic-faces-class)
                   source-object ^^hole
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   )
               (hole :class 'sphere-object
                   reference-object ^sub-frame
                   diameter (* 3 (/ ^^max-width 4))
                   )
               (imprinted-socket :class '(tagging-object geometry-with-split-periodic-faces-class)
                   source-object ^^socket
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^^max-element-size ^^min-element-size
                                        0 0.1 0 20.0 1.0e-5)
                   )
                             
               (socket :class 'intersection-object
                   object-list (list ^sphere ^cyl)
                   reference-object ^sub-frame
                   )

               (sphere :class 'sphere-object
                   diameter ^^max-width
                   )

               (cyl :class 'cylinder-object
                   height ^^max-height
                   diameter ^^max-width             
                   )
               )
  :subobjects (
               (mating-surface-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list ^^imprinted-hole)
                   mesh-object (the link-mesh (:from (the link-mesh-model (:from ^link-ref-incident-on-constraint))))
                   color 'green
				   display? nil
                   )
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 
  
;;; Class holding knuckle male and female elements on instantiation
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;------------------------------------------------------------------------------------------------------------- 
(define-class solid-knuckle-constraint-class  
	:inherit-from (master-joint-model)
	:properties (
				 )
 )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;-------------------------------------------------------------------------------------------------------------  
 
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------  
(define-class solid-knuckle-female-element
	:inherit-from (difference-object joint-element-model)
	:properties (	
				  outer-radius (* ^max-width ^scale-factor)
				  inner-radius (* ^outer-radius 0.6)
				
				  union-list (when (and (plusp ^max-width) (plusp ^max-height) )
					   (list !superior)
					   )
				  difference-list (when (and (plusp ^max-width) (plusp ^max-height) )
									(list ^imprinted-pin-hole)
									)
				  object-list (list ^eye ^imprinted-pin-hole)

				  (imprinted-pin-hole :class '(tagging-object geometry-with-split-periodic-faces-class)
					   source-object ^^pin-hole
					   tag-dimensions '(1 2 3)
					   tag-attributes (list ^^max-element-size ^^min-element-size
											0 0.1 0 20.0 1.0e-5)
					   )
				   
				  (pin-hole :class 'cylinder-object
					   reference-object ^main-frame
					   height (* ^^inner-radius 4)
					   diameter ^^inner-radius
					   )
								  
				  (eye :class '(tagging-object cylinder-object)
					   tag-dimensions '(1 2 3)
					   tag-attributes (list ^^max-element-size ^^min-element-size
											0 0.1 0 20.0 1.0e-5)
					   reference-object ^sub-frame
					   height ^^max-height
					   diameter ^^outer-radius
					   )

				  (sub-point-ref :class 'sub-point-data-model
					   )

		   
				 )
	:subobjects (
					(mating-surface-nodes :class 'mesh-nodes-query-class
						   tagged-object-list (list ^^imprinted-pin-hole)
						   mesh-object (the link-mesh (:from (the link-mesh-model (:from ^link-ref-incident-on-constraint))))
						   color 'green
						   display? nil
						)
				)
 )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 
 
;-------------------------------------------------------------------------------------------------------------
; Class: open-constraint-class
; An open constraint is a joint with no geometry
; Used for leaving the end of a link open
;-------------------------------------------------------------------------------------------------------------  
(define-class solid-knuckle-male-element
  :inherit-from (union-object joint-element-model)
  :properties (
			   ;;; Helping variables
			   outer-radius (* ^max-width ^scale-factor)
			   inner-radius (* ^outer-radius 0.6)
			   
			   ;;; Lists sent to link-geometry-class ------->
               union-list (when (and (plusp ^max-width) (plusp ^max-height) )
                            (list !superior) ;!superior is a reference to the union object?
                            )
               difference-list (when (and (plusp ^max-width) (plusp ^max-height) )
                                (list ^subtracted-box)
                                )
			   ;;; <-------
			   
			   object-list (list ^pin ^fork)
               simplify? t
			   
			   (imprinted-pin :class '(tagging-object geometry-with-split-periodic-faces-class)
				   source-object ^^pin
					   tag-dimensions '(1 2 3)
					   tag-attributes (list ^^max-element-size ^^min-element-size
											0 0.1 0 20.0 1.0e-5)
					)
			   
			   ;;; Objects used to create the male joint geometry ---->
			   (fork :class 'difference-object
					object-list (list ^^box ^^subtracted-box ^^trim-object ^^sphere)
					)
				
			   (subtracted-box :class 'box-object
					reference-object ^main-frame
					width (* ^^outer-radius 1.5)
					height ^^outer-radius
					depth ^^max-width
					orientation (list
                                (translate (list (- (* 0.75 ^^outer-radius) ^^inner-radius) 0 0 ))
                                )
					)
			   
			   (box :class 'box-object
					reference-object ^main-frame
					width (* ^^outer-radius 2)
					height ^^outer-radius
					depth (* ^^outer-radius 1.5)
					orientation (list
                                (translate (list (- ^^outer-radius ^^inner-radius) 0 0 ))
                                )
					)
                   
               (pin :class 'cylinder-object
                   reference-object ^main-frame
                   diameter ^^inner-radius
                   height (* ^^outer-radius 2)
                   )
				
			   (trim-box :class 'box-object
					reference-object ^main-frame
					width ^^inner-radius
					height ^^outer-radius
					depth (* ^^outer-radius 1.5)
					orientation (list 
								(translate (list (* ^^inner-radius -0.5) 0 0))
								)
					)
				
			   (trim-cyl :class 'cylinder-object
					reference-object ^main-frame
					diameter ^^outer-radius
					height (* ^^outer-radius 1.5)
					)
				
			    (trim-object :class 'difference-object
					object-list (list ^^trim-box ^^trim-cyl)
					)
			    
				
				(difference-sphere :class 'sphere-object
					reference-object ^main-frame
					diameter (* ^^outer-radius 3)
					)
					
				(trim-sphere :class 'sphere-object
					reference-object ^main-frame
					diameter (* ^^outer-radius 4)
					)
					
				(sphere :class 'difference-object
					object-list (list ^^trim-sphere ^^difference-sphere)
					)
				;;; <-------
				
				;;; Used as the difference-list in link-geometry-class --->
               (difference-box :class 'difference-object
					object-list(list ^^subtracted-box ^^eye)
					)
			   (eye :class '(cylinder-object)
					   reference-object ^main-frame
					   height ^^max-height
					   diameter ^^outer-radius
					   )
			   ;;; <-----	 
				
			   ;;; Defines where the sub-frame should be placed
			   (sub-point-ref :class 'sub-point-data-model
					orientation
							(list (translate (list (- (* ^^outer-radius 2) ^^inner-radius) 0 0)))
							
					)
				)
  :subobjects (
					(mating-surface-nodes :class 'mesh-nodes-query-class
						tagged-object-list (list ^^imprinted-pin)
						mesh-object (the link-mesh (:from (the link-mesh-model (:from ^link-ref-incident-on-constraint))))
						color 'green
						display? nil
					)
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END load-model definitions
;------------------------------------------------------------------------------------------------------------- 