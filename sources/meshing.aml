;-------------------------------------------------------------------------------------------------------------
; Class: RBE2-collection
; Instantiates every RBE2 as a series-object
;------------------------------------------------------------------------------------------------------------- 
(define-class RBE2-collection
	:inherit-from (series-object)
	:properties (
				 link-mesh 			nil ;;link-mesh-class
				 constraints-list 	(get-rbe2-constraints-list ^link-mesh)
				 link-mesh-db 		(get-link-mesh-db ^link-mesh)
				 
				 class-expression 	'analysis-rigid-body-element-type-1-class
				 series-prefix 		'rbe2
				 quantity 			(length ^constraints-list)
				 init-form '(
							 independent-node-query-object 		(the rbe2-independent-node (:from (nth ^index ^constraints-list)))
							 dependent-nodes-query-object 		(the rbe2-dependent-nodes (:from (nth ^index ^constraints-list)))
							 dependent-degrees-of-freedom-list 	'(1 2 3 4 5 6)
							 create-new-independent-node? 		nil ;; The node is added in the node-set manually
                             id 								(+ 1 ^index) ;; Have to set the id manually, as default is 1 for each instance
							 )
				 )
	)
;-------------------------------------------------------------------------------------------------------------
; END RBE2-collection definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: link-mesh-class
; Class responsible for meshing
;------------------------------------------------------------------------------------------------------------- 
(define-class link-mesh-class
  :inherit-from (object)
  :properties (
               link-model 	nil
			   mesh-object ^link-mesh
               geometry-model-object (default nil)

			   non-free-constraints-list  (get-non-free-constraints-incident-on-link-list ^link-model)
			   
			   rbe2-independent-node-list	(loop for c in ^non-free-constraints-list
												collect (the rbe2-independent-node (:from c))
												)				
               
			   (node-set :class 'analysis-node-set-class
                   query-objects-list (append (if (get-export-surface ^link-model) 
										(list (the nodes-query (:from ^^link-mesh)))
										(list (the nodes-query (:from ^^tet-mesh))))
										^rbe2-independent-node-list)
                   ) ;;Contains all the nodes used for the bdf file
               )
  :subobjects (
               (mesh-db :class 'mesh-database-class
					)
			   (link-mesh :class 'paver-mesh-class
					object-to-mesh ^^geometry-model-object
					mesh-database-object ^^mesh-db
					element-shape :tri
					)
			   (tet-mesh :class 'tet-mesh-class
					mesh-database-object ^^mesh-db
					object-to-mesh (the superior superior link-mesh surface-elements-query)
					)
               ;; Link mesh query
			   (link-mesh-surface-elements :class 'mesh-elements-2d-query-class
                   tagged-object-list (append
									   (the union-list (:from ^^geometry-model-object))
                                       (the visible-members-ref-list (:from  ^^geometry-model-object))
                                       (the object-list (:from ^^geometry-model-object))
									   )
                   color 'cyan
                   mesh-object ^^link-mesh
                   )
               (link-mesh-solid-elements :class 'mesh-elements-3d-query-class
                   tagged-object-list (append
                                       (the union-list (:from ^^geometry-model-object))
                                       (the visible-members-ref-list (:from  ^^geometry-model-object))
                                       )
                   mesh-object ^^tet-mesh
                   )
			   (rbe2-dependent-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (the mating-surface-list (:from ^^geometry-model-object))
                   mesh-object ^^link-mesh
                   )
               (fixed-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list
                                       (the fixed-edge (:from ^^geometry-model-object))
                                       )
;                    mesh-object ^^link-mesh
                   )
               (loaded-nodes :class 'mesh-query-nodes-from-interface-class
                   ;interface-object (the point-ref (:from (the constraint-element (:from (nth 0 ^^solid-constraints-ref-list) ))))
                   mesh-object ^^link-mesh
                   )
			   (rbe2-list :class 'RBE2-collection
				   link-mesh ^superior)
               )
  )

(define-method get-surface-mesh link-mesh-class ()
	!link-mesh
)
  
(define-method get-mesh-model-subobject link-mesh-class (subobject-type)
	(case subobject-type
		(mesh-db !mesh-db)
		(2d-elements (the link-mesh elements-query))
		)
	)
  
(define-method get-mesh-entities-list link-mesh-class ()
	(if (get-export-surface !link-model)
		(the link-mesh nodes-query mesh-entities-list)
		(the tet-mesh nodes-query mesh-entities-list)
	)
)

(define-method get-link-solid-mesh-elements-query-objects-list link-mesh-class ()
  (when (the elements-query (:from !tet-mesh :error nil :relation nil))
    (list (the elements-query (:from !tet-mesh))))
  )
  
(define-method get-rbe2-constraints-list link-mesh-class ()
	(when !non-free-constraints-list
		!non-free-constraints-list)
	)

(define-method get-link-mesh-db link-mesh-class ()
	!mesh-db
	)

;---------------------------------------------------------------
;Returns the smallest number. If both are nil then return 10e10, 
;if one is nil, then the other.  
;---------------------------------------------------------------
(defun min-or-nil (p q)
	(if (or (not p) (not q))
		(if (and (not p) (not q))
			10e10 		;;Random big number if both are nil, just for comparison reasons
			(if p p q)
		)
		(min p q)
	)
)

(define-method get-rigid-body-element-objects-list link-mesh-class ()
	(when !rbe2-list 
		(children !rbe2-list :class 'analysis-rigid-body-element-type-1-class))
	)
;-------------------------------------------------------------------------------------------------------------
; END link-mesh-class definitions
;------------------------------------------------------------------------------------------------------------- 
