;-------------------------------------------------------------------------------------------------------------
; Class: RBE2-collection
; Instantiates every RBE2 as a series-object
;------------------------------------------------------------------------------------------------------------- 
(define-class RBE2-collection
	:inherit-from (series-object)
	:properties (
				 link-mesh 			nil ;;link-mesh-class
				 constraints-list 	(get-rbe2-constraints-list ^link-mesh)
				 
				 class-expression 	'analysis-rigid-body-element-type-1-class
				 series-prefix 		'rbe2
				 quantity 			(length ^constraints-list)
				 init-form '(
							 independent-node-query-object 		(the rbe2-independent-node (:from (nth ^index ^constraints-list)))
							 dependent-nodes-query-object 		(the rbe2-dependent-nodes (:from (nth ^index ^constraints-list)))
							 dependent-degrees-of-freedom-list 	'(1 2 3 4 5 6)
							 create-new-independent-node? 		nil ;; The node is added in the node-set manually
                             id 								(+ 1 ^index) ;; Have to set the id manually, as default is 1 for each instance
							 )
				 )
	)
;-------------------------------------------------------------------------------------------------------------
; END RBE2-collection definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: link-mesh-class
; Class responsible for meshing
;------------------------------------------------------------------------------------------------------------- 
(define-class link-mesh-class
  :inherit-from (object)
  :properties (
               link-model 					nil ;;link-model-class
               geometry-model-object 		nil ;;link-geometry-class
			   joint-elements 				nil
			   
			   mesh-object 					^link-mesh
			   
			   ;non-free-constraints-list  	(get-non-free-constraints-incident-on-link-list ^link-model)
			   
			   rbe2-independent-node-list	(loop for element in ^joint-elements
												collect (get-rbe2-independent-node element)
												)
               nodes-query-length (length (the mesh-entities-list (:from (the nodes-query (:from ^link-mesh)))))
			   (node-set :class 'analysis-node-set-class
                   query-objects-list (append (if (get-export-surface ^link-model) 
												(list (the nodes-query (:from ^^link-mesh)))
												(list (the nodes-query (:from ^^tet-mesh))))
											^rbe2-independent-node-list)
                   ) ;;Contains all the nodes used for the bdf file
               )
  :subobjects (
			   (mesh-database :class 'mesh-database-class
					)
			   (link-mesh :class 'paver-mesh-class
					object-to-mesh 			^^geometry-model-object
					mesh-database-object	^^mesh-database
					element-shape 			:tri
					)
			   (tet-mesh :class 'tet-mesh-class
					mesh-database-object	^^mesh-database
					object-to-mesh 			(the superior superior link-mesh surface-elements-query)
					)
			   (rbe2-dependent-nodes :class 'mesh-nodes-query-class
                   tagged-object-list	(get-rbe2-dependent-nodes-list ^^geometry-model-object)
                   mesh-object 			^^link-mesh
                   )
               (fixed-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list
                                       (the fixed-edge (:from ^^geometry-model-object))
                                       )
;                    mesh-object ^^link-mesh
                   )
               (loaded-nodes :class 'mesh-query-nodes-from-interface-class
                   ;interface-object (the point-ref (:from (the constraint-element (:from (nth 0 ^^solid-constraints-ref-list) ))))
                   mesh-object ^^link-mesh
                   )
			   (rbe2-list :class 'RBE2-collection
				   link-mesh ^superior
				   )
               )
  )

(define-method get-surface-mesh link-mesh-class ()
	!link-mesh
)
  
(define-method get-mesh-database link-mesh-class ()
	!mesh-database
)
  
(define-method get-mesh-entities-list link-mesh-class ()
	(if (get-export-surface !link-model)
		(the link-mesh nodes-query mesh-entities-list)
		(the tet-mesh nodes-query mesh-entities-list)
	)
)

(define-method get-link-mesh-node-query-objects-list link-mesh-class ()
	(list (the nodes-query (:from !link-mesh)))
)

(define-method get-link-surface-mesh-elements-query-objects-list link-mesh-class ()
	(when (the surface-elements-query (:from !link-mesh :error nil :relation nil))
		(list (the surface-elements-query (:from !link-mesh)))
	)
)

(define-method get-link-solid-mesh-elements-query-objects-list link-mesh-class ()
  (when (the elements-query (:from !tet-mesh :error nil :relation nil))
    (list (the elements-query (:from !tet-mesh))))
  )
  
(define-method get-rbe2-constraints-list link-mesh-class ()
	!joint-elements
)

(define-method get-rbe2-independent-node-list link-mesh-class ()
	!rbe2-independent-node-list
)

(define-method get-rigid-body-element-objects-list link-mesh-class ()
	(when !rbe2-list 
		(children !rbe2-list :class 'analysis-rigid-body-element-type-1-class))
)

(define-method get-node-position-in-query-list link-mesh-class (node-query-object)
	(1+ (position node-query-object (the node-set query-objects-list)))
)
;-------------------------------------------------------------------------------------------------------------
; END link-mesh-class definitions
;------------------------------------------------------------------------------------------------------------- 
