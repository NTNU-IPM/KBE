 
;;; Class for holding male and female instantiations as subobjects
(define-class master-joint-model
  :inherit-from (frame-data-model)
  :properties (
               id 					(default nil)
			   link-incidence 		(default nil)
			   max-element-size 	(deafult 0.04)
			   min-element-size 	(deafult 0.01)
               scale-factor 		(default 1.2)
			   constraint-variable	(default nil)
               
               point-ref (default nil)
               direction (default nil)
               (z-vector-ref :class 'vector-data-model
                   direction ^^direction
                   )
               (x-vector-ref :class 'vector-data-model
                   direction (arbitrary-normal-to-vector ^^direction)
                   )
               
               constraint-type (default nil)
			   (max-width :class 'editable-data-property-class
					label "Max width"
					;;Have to check if the max dimensions are not nil to avoid error. Workaround for the open constraint type.
				formula (let (
								   (fem-max (first (the local-max-dimension (:from ^female-element-solid-model))))
								   (male-max (first (the local-max-dimension (:from ^male-element-solid-model)) ))
								  )
								  (if (and fem-max male-max)
									  (* ^scale-factor (max fem-max male-max))
									  (if fem-max
										(* ^scale-factor fem-max)
										(* ^scale-factor male-max)
									  )
									)
								)
					available? ^formula
				)
               (max-height :class 'editable-data-property-class
					label "Max height"
					;;Have to check if the max dimensions are not nil to avoid error. Workaround for the open constraint type.
					formula (let (
								   (fem-max (second (the local-max-dimension (:from ^female-element-solid-model))))
								   (male-max (second (the local-max-dimension (:from ^male-element-solid-model)) ))
								  )
								  (if (and fem-max male-max)
									  (* ^scale-factor (max fem-max male-max))
									  (if fem-max
										(* ^scale-factor fem-max)
										(* ^scale-factor male-max)
									  )
									)
							)
                )
			   
               link-ref-incident-on-constraint (list
                                                (the link-ref-incident-on-constraint (:from ^male-element-solid-model))
                                                (the link-ref-incident-on-constraint (:from ^female-element-solid-model))
                                                )
               
			   (load-type :class 'option-property-class
					mode 			'radio
					options-list	(list 'force 'torque)
					formula 		'torque
					label 			"Load type"
					)
			   (magnitude :class 'var-unit-data-property-class
					current-load (case ^^load-type
									('force 'N)
									('torque (progn (add-unit 'Nm 1.0 '(N m)) 'Nm));; Adding the unit should probably only be done once
								  )
					value-in 	1
					unit-in 	^current-load
					unit 		^current-load
					label 		"Magntitude"
					)
			   (load-direction :class 'editable-data-property-class
					formula 	(default ^direction)
					label 		"Load direction vector"
					)
			   
			   ;;not in use from >>>>
			   (constraint-type-selection :class 'option-property-class
					label "Constraint Type"
					mode 'menu
					options-list (class-direct-defined-subclasses 'master-joint-model)
					labels-list (loop for option in !options-list
                                 collect (remove "-constraint-class" (write-to-string option))
                                 )
					formula (progn 
								;(change-value ^constraint-type (remove "-constraint-class" (write-to-string (nth (position ^constraint-type !labels-list) !options-list))))
								(change-class ^male-element-solid-model (read-from-string (concatenate ^constraint-type "-male-element")))
							)
					)
			   
			   meshing-list (list (the display? (:from (the mating-surface-nodes (:from ^male-element-solid-model))))
								  (the display? (:from (the mating-surface-nodes (:from ^female-element-solid-model))))
								  (the display? (:from (the joint-center-node (:from ^male-element-solid-model))))
								  (the display? (:from (the joint-center-node (:from ^female-element-solid-model))))
								  )
			   
			   (toggle-mesh :class 'flag-property-class
					label "Toggle mating-surface-nodes mesh"
					formula (loop for disp in ^meshing-list
								do
									(if (equal disp t) (change-value disp nil) (change-value disp  t))
								)
					;progn (change-value (the display? (:from (the mating-surface-nodes (:from ^male-element-solid-model)))) t)
					;				(change-value (the display? (:from (the mating-surface-nodes (:from ^female-element-solid-model)))) t)
					;				(change-value (the display? (:from (the joint-center-node (:from ^male-element-solid-model)))) t)
					;				(change-value (the display? (:from (the joint-center-node (:from ^female-element-solid-model)))) t)
					;				)
					)
			   ;;Not in use to <<<<
			   
			   (load-case :class 'load-model
					load-type 		^^load-type
					load-point 		^^origin
					magnitude 		^^magnitude
					load-direction 	^^load-direction
					loadID			(1+ (get-male-triad-id-from-master-joint-model (the superior superior)))
					mechanism-size	(calculate-mechanism-size (the superior superior superior superior)) ;;Bad code. The reference is to the main-mechanism-class
					translation		^^max-height
					)
					
			   ;;Only display properties for non-open constraints
			   property-objects-list (if (is-open-constraint (the superior)) 
				(list "This is an open constraint. No properties can be edited.") 
				(list
					;(the superior toggle-mesh self)
					'("Draw joint" (button1-parameters :draw-joint)
                                        ui-work-area-action-button-class)
					'("Draw male element" (button1-parameters :draw-male)
                                        ui-work-area-action-button-class)
					'("Draw female element" (button1-parameters :draw-female)
                                        ui-work-area-action-button-class)
					""
					'("Undraw" (button1-parameters :undraw)
                                        ui-work-area-action-button-class)
					;(list (the superior constraint-type-selection self) 
					;	'(automatic-apply? t))
					;'("Change joint type" (button1-parameters :change-joint ui-work-area-action-button-class))
					(the superior max-width self)
					(the superior max-height self)
					""
					"Load case"
					(list (the superior load-type self)
						'(automatic-apply? t))
					(list (the superior magnitude self)
						'(automatic-apply? t))
					(list (the superior load-direction self)
						'(automatic-apply? t))
					'("Apply load" (button1-parameters :apply-load)
                                        ui-work-area-action-button-class)
					)	
				)
			   )
  :subobjects (
               (male-element-solid-model :class (read-from-string (concatenate !constraint-type "-male-element"))
				   master-joint-object (the superior superior) ;; Instantiating a reference to the master-joint-model
				   gender 'male
                   )
               (female-element-solid-model :class (read-from-string (concatenate !constraint-type "-female-element"))
                   master-joint-object (the superior superior)
				   (point-ref :class 'point-data-model
                              coordinates (convert-coords ^^superior '(0 0 0) :from :local :to :global)
                              )
                   gender 'female
                   )
               )
  )
 
(define-method get-constraint-type master-joint-model ()
	!constraint-type
) 
 
(define-method get-female-element master-joint-model ()
	(the female-element-solid-model)
)
 
(define-method get-joint-direction-vector master-joint-model () 
	(the male-element-solid-model direction) 
)

(define-method get-main-frame-coords master-joint-model (&optional params)
	(if params
		(nth params !origin)
		!origin
	)
)


(define-method get-direction master-joint-model ()
	!direction
)

(define-method is-open-constraint master-joint-model ()
	(equal "open" !constraint-type)
 )
 
 
(define-method get-link-incidence master-joint-model ()
	!link-incidence
)

;; Used in (write-fmm-model-file) to connect master/slave triads to the joint elements
(define-method get-male-triad-id-from-master-joint-model master-joint-model ()
	(1- (* 2 !id))
)
  
(define-method get-constraint-incidence master-joint-model (link-index)
  (let (
        (pos (position link-index !link-incidence) )
        )
    (when pos
      (nth pos (children (the) :class 'joint-element-model))
      )
    )
  )

 ;;; Left-click button methods for master-joint-model 
(define-method work-area-button1-action master-joint-model (params)
	(case params
		(:draw-joint
			(draw self)
		)
		(:draw-male
			(draw (the male-element-solid-model))
		)
		(:draw-female
			(draw (the female-element-solid-model))
		)
		(:undraw
			(undraw self)
		)
		(:apply-load
			(if (equal "Yes" (pop-up-message (format nil "Are these settings OK?~%Load type: ~a~%Magnitude: ~a~%Direction: ~a" 
					!load-type !magnitude !load-direction) :width 200 :done-label "Yes" :cancel-label "No"))
					(progn
						(add-load (the superior superior) !load-case)
						(draw !load-case)
					)
			)
		)
	)
)

;;; Superclass for male and female joint elements
(define-class joint-element-model
  :inherit-from (frame-data-model)
  :properties (
			   ;;; union-list is the list used for a union with the incident link. 
			   ;;; different-list is the list of objects that are to be subtracted from the final geometry.
			   ;;; See link-geometry-class in links.aml for the use
               union-list 			nil
               difference-list 		nil
			   
               master-joint-object	nil
			   constraint-type		(get-constraint-type ^master-joint-object)
			   direction			(get-direction ^master-joint-object)
			   max-element-size 	(when (and ^max-width ^max-height)
										(/ (min ^max-width ^max-height) 4)
										)
			   min-element-size 	(when (and ^max-width ^max-height)
										(/ (min ^max-width ^max-height) 8)
										)
			   
               display? 			t
               gender 				nil 
               gender_int 			(case ^gender ('male 0) ('female 1) )
               link-incidence 		(nth ^gender_int (get-link-incidence ^master-joint-object))
			   
               link-ref-incident-on-constraint (get-link-ref ^links ^link-incidence)
			   link-mesh-model-object (when (the link-mesh-model (:from ^link-ref-incident-on-constraint))
										(the link-mesh-model (:from ^link-ref-incident-on-constraint)))
               
               local-joint-index (position !superior (the constraints-incident-on-link-list (:from ^link-ref-incident-on-constraint)) )
               members-connected-to-joint-element (loop for member in (the members-ref-list (:from (the link-solid-geometry (:from ^link-ref-incident-on-constraint)) ))
                                                    when (position !superior (the connection-between-constraints (:from member)))
                                                    collect member
                                                    )
               
			   local-max-dimension (loop for member in (the members-ref-list (:from (the link-solid-geometry (:from ^link-ref-incident-on-constraint))))
                                     for pos = (position !superior (the connection-between-constraints (:from member)))
                                     when (and pos (the display? (:from member)))
                                     maximize (if (= pos 0)
                                                  (max-width (the cross-section_D (:from member)) )
                                                (max-width (the cross-section_A (:from member)) ) ) into max-w
                                     and  maximize (if (= pos 0)
                                                       (max-height (the cross-section_D (:from member)) )
                                                     (max-height (the cross-section_A (:from member)) ) ) into max-h
                                     finally (return (list max-w max-h))
                                     )

               (sub-point-ref :class 'sub-point-data-model
                   )
			   
			   ;;Property used for writing to FEDEM
			   is-incident-link-drawable? 	(the is-link-drawable? (:from ^link-ref-incident-on-constraint))
               )
  :subobjects (
                (main-frame :class 'frame-data-model
					;;; inherited frame properties used in main-frame and sub-frame
					(x-vector-ref :class 'vector-data-model
						direction (let (
										(first-sweep (nth 0 ^members-connected-to-joint-element))
										(x-dir  (subtract-vectors
												(the coordinates (:from (the point-ref (:from (nth 0 (the connection-between-constraints (:from first-sweep) ) )))))
												(the coordinates (:from (the point-ref (:from (nth 1 (the connection-between-constraints (:from first-sweep) ) ))))))
											)
										(x-dir-normal (cross-product ^^direction (cross-product ^^direction x-dir)))
									   )
									   (if (equal 0 (vector-length x-dir-normal))
											x-dir-normal
											(arbitrary-normal-to-vector ^^direction)
										)
									)
                    )
                )
				;;; An element's sub-frame is placed by specifying the sub-point-ref in the element's properties
               (sub-frame :class 'sub-frame-data-model
                   )
			   (joint-center-node :class 'mesh-node-class
                   coordinates (the origin (:from ^main-frame))
                   mesh-object (the link-mesh (:from (the link-mesh-model (:from ^link-ref-incident-on-constraint))))
				   display? nil
                   )
               )
  )

(define-method get-constraint-type joint-element-model ()
	!constraint-type
)
	
 
(define-method get-max-height joint-element-model ()
	(when !max-height !max-height)
)
 
(define-method is-open-constraint joint-element-model ()
	(equal "open" !constraint-type)
 ) 
 
(define-method get-main-frame-coords joint-element-model (&optional params)
	(if params
		(nth params (the main-frame origin))
		(the main-frame origin)
	)
)
;; Used in (write-fmm-model-file) to generate unique IDs for each joint element  
(define-method get-joint-element-id joint-element-model ()
	(1- (+ (* 2 !id) !gender_int)) ;; This value will be valid as long as there are two parts of a joint
)

(define-method get-constraint-incidence joint-element-model (link-index)
 (when (member link-index ^link-incidence) (the self))
 )

