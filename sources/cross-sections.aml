;-------------------------------------------------------------------------------------------------------------
; Class: cross-section-model
; Superclass used for querying class-names
;-------------------------------------------------------------------------------------------------------------
(define-class cross-section-model
  :inherit-from(tagging-object position-object)
  :properties (
               ;;; must be set on init from parent object
               max-element-size 0.004
               tag-dimensions '(1 2)
               tag-attributes (list ^max-element-size .1
                                    0 0.1 0 20.0 1.0e-5)
               )
  )
  
(define-method get-width cross-section-model ()
  !width
)

(define-method get-height cross-section-model ()
  !height
)
;-------------------------------------------------------------------------------------------------------------
; END cross-section-model
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: circular-section
;------------------------------------------------------------------------------------------------------------- 
(define-class circular-section
  :inherit-from (imprint-class cross-section-model)
  :properties (
               target-object ^disc
               tool-object-list (list ^p1)
;;;                diameter is average or max of width/height?
               diameter (average ^width ^height)
               (disc :class 'disc-object
                   diameter ^^diameter
                   )
               (p1 :class 'point-object
                   coordinates (list (/ ^diameter 2) 0 0)
                   )
               )
  )
(define-method get-width circular-section ()
  !diameter
  )
(define-method get-height circular-section ()
  !diameter
  )
;-------------------------------------------------------------------------------------------------------------
; END circular-section
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: circular-tube-section
;------------------------------------------------------------------------------------------------------------- 
(define-class circular-tube-section
  :inherit-from (imprint-class cross-section-model)
  :properties (
               target-object ^diff-object
               tool-object-list (list ^p1 ^p2)
               
               outer-diameter (average ^width ^height)
;;;                20% of diameter
               thickness (* 0.2 ^outer-diameter)

               (p1 :class 'point-object
                   coordinates (list (/ ^outer-diameter 2) 0 0)
                   )
               (p2 :class 'point-object
                   coordinates (list (/ (- ^outer-diameter ^thickness) 2) 0 0)
                   )

               (diff-object :class 'difference-object
                   object-list (list ^outer-circular ^inner-circular)
                   simplify? t
                   )

               (outer-circular :class 'circular-section
                   diameter ^outer-diameter
                   )
               (inner-circular :class 'circular-section
                   diameter (- ^outer-diameter ^thickness)
                   )
               )
  )
(define-method get-width circular-tube-section ()
  !outer-diameter
  )
(define-method get-height circular-tube-section ()
  !outer-diameter
  )
;-------------------------------------------------------------------------------------------------------------
; END circular-tube-section
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: rectangular-section
;------------------------------------------------------------------------------------------------------------- 
(define-class rectangular-section
  :inherit-from (imprint-class cross-section-model )
  :properties (
;;;                inherit from cross-section-model
               width (default 0.04)
               height (default 0.01)
               
               target-object ^sheet
               tool-object-list (list ^p1)
               (p1 :class 'point-object
                   coordinates (list (/ ^width 2) 0 0)
                   )
               (sheet :class 'sheet-object
                   width ^^width
                   height ^^height
                   )
               )
  )
(define-method get-width rectangular-section ()
  !width
  )
(define-method get-height rectangular-section ()
  !height
  )
;-------------------------------------------------------------------------------------------------------------
; END rectangular-section
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: rectangular-tube-section
;------------------------------------------------------------------------------------------------------------- 
(define-class rectangular-tube-section
  :inherit-from (cross-section-model difference-object)
  :properties (
;;;                inherit from cross-section-model
               width (default 0.04)
               height (default 0.01)
               
               object-list (list ^outer-rectangle ^inner-rectangle)
;;;                20% of average of width/height?
               thickness (* 0.2 (average ^width ^height) )
               simplify? t

               (outer-rectangle :class 'sheet-object
                   width ^^width
                   height ^^height
                   )
               (inner-rectangle :class 'sheet-object
                   width (- ^^width ^thickness)
                   height (- ^^height ^thickness)
                   )
               )
  )
(define-method get-width rectangular-tube-section ()
  !width
  )
  
(define-method get-height rectangular-tube-section ()
  !height
  )
;-------------------------------------------------------------------------------------------------------------
; END rectangular-tube-section
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: line-section definitions
;------------------------------------------------------------------------------------------------------------- 
(define-class line-section
  :inherit-from (line-object cross-section-model)
  :properties (
;;;                inherit from cross-section-model
               height (default 0.04)
               point1 (list 0 (- (/ ^height 2)) 0)
               point2 (list 0 (/ ^height 2) 0)
               )
  )

(define-method get-width line-section ()
  !height
  )

(define-method get-height line-section ()
  0
  )
;-------------------------------------------------------------------------------------------------------------
; END line-section definitions
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: I-beam-section
;------------------------------------------------------------------------------------------------------------- 
(define-class I-beam-section
  :inherit-from (union-object cross-section-model)
  :properties (
;;;                inherit from cross-section-model
               width (default 0.04)
               height (default 0.04)
               
               object-list (list ^top-flange ^web ^bottom-flange)
               ;;10% of width/height
               flange-thickness (* 0.1 ^height)
               web-thickness (* 0.1 ^width)
               simplify? t

               (top-flange :class 'sheet-object
                   width ^^width
                   height ^flange-thickness
                   orientation (list
                                (translate (list 0 (half ^^height) 0))
                                )
                   )
               (web :class 'sheet-object
                   width ^web-thickness
                   height ^^height
                   )
               (bottom-flange :class 'sheet-object
                   width ^^width
                   height ^flange-thickness
                   orientation (list
                                (translate (list 0 (- (half ^^height)) 0))
                                )
                   )
               
               )
  )
(define-method get-width I-beam-section ()
  !width
  )
(define-method get-height I-beam-section ()
  (+ !flange-thickness !height)
 )
;-------------------------------------------------------------------------------------------------------------
; END I-beam-section definitions
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: H-beam-section
;------------------------------------------------------------------------------------------------------------- 
(define-class H-beam-section
  :inherit-from (union-object cross-section-model)
  :properties (
;;;                inherit from cross-section-model
               width (default 0.04)
               height (default 0.04)
               
               object-list (list ^left-flange ^web ^right-flange)
               ;; 10% of width/height
               flange-thickness (* 0.1 ^width)
               web-thickness (* 0.1 ^height)
               simplify? t

               
               (left-flange :class 'sheet-object
                   width ^flange-thickness
                   height ^^height
                   orientation (list
                                (translate (list (half ^^width) 0 0))
                                )
                   )
               (web :class 'sheet-object
                   width ^^width
                   height ^web-thickness
                   )
               (right-flange :class 'sheet-object
                   width ^flange-thickness
                   height ^^height
                   orientation (list
                                (translate (list (- (half ^^width)) 0 0))
                                )
                   )              
               )
  )
(define-method get-width H-beam-section ()
  (+ !width !flange-thickness)
 )
(define-method get-height H-beam-section ()
  !height
 )
;-------------------------------------------------------------------------------------------------------------
; END H-beam-section definitions
;-------------------------------------------------------------------------------------------------------------
  
;-------------------------------------------------------------------------------------------------------------
; Class: hexagonal-section
;------------------------------------------------------------------------------------------------------------- 
(define-class hexagonal-section
  :inherit-from (imprint-class cross-section-model)
  :properties (
               target-object ^poly
               tool-object-list (list ^p1)
               R (/ (average ^width ^height) 2)
               (poly :class 'polygon-object
                   vertices (list
                             (list ^R 0 0)
                             (list (/ ^R 2) (- (/ (* ^R (sqrt 3)) 2)) 0)
                             (list (- (/ ^R 2)) (- (/ (* ^R (sqrt 3)) 2)) 0)
                             (list (- ^R) 0 0)
                             (list (- (/ ^R 2)) (/ (* ^R (sqrt 3)) 2) 0)
                             (list  (/ ^R 2)  (/ (* ^R (sqrt 3)) 2) 0)
                             )
                   dimension 2
                   )
               (p1 :class 'point-object
                   coordinates (list 0 (/ (* ^R (sqrt 3)) 2) 0)
                   )
               
               )
  )

(define-method get-width hexagonal-section ()
  (* 2 !R)
  )
(define-method get-height hexagonal-section ()
  (* !R (sqrt 3))
  )
;-------------------------------------------------------------------------------------------------------------
; END hexagonal-section definitions
;-------------------------------------------------------------------------------------------------------------