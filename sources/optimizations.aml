;-------------------------------------------------------------------------------------------------------------
; Class: design-variable-class
; Holding the design variable value, as well as min and max values for it
;-------------------------------------------------------------------------------------------------------------
(define-class design-variable-class
	:inherit-from (data-model-node-mixin)
	:properties (
				 (dv-value :class 'editable-data-property-class
					label (format nil "~a initial value" (object-name ^superior))
					)
				 (min-value :class 'editable-data-property-class
					 formula (default (* 0.5 ^dv-value))
					 label (format nil "~a minimum value" (object-name ^superior))
					 )
				 (max-value :class 'editable-data-property-class
					 formula (default (* 2 ^dv-value))
					 label (format nil "~a maximum value" (object-name ^superior))
					 )
				 property-objects-list (list 
										 (list (the superior dv-value self)
												'(automatic-apply? t))
										 (list (the superior min-value self)
												'(automatic-apply? t))
										 (list (the superior max-value self)
												'(automatic-apply? t))
										)
				 )
)
	
(define-method get-dv-value design-variable-class ()
	!dv-value
)
(define-method get-min-value design-variable-class ()
	!min-value
)
(define-method get-max-value design-variable-class ()
	!max-value
)
;-------------------------------------------------------------------------------------------------------------
; END design-variable-class definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: constraint-class
; Superclass for all optimization classes
;-------------------------------------------------------------------------------------------------------------
(define-class constraint-class
	:inherit-from (object)
	:properties (
				 penalty-power			(default 2)
				 penalty-weight-factor	(default 10)
				 )
)

;-------------------------------------------------------------------------------------------------------------
; END constraint-class definitions
;-------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------
; Class: general-optimization-model
; Superclass for all optimization classes
;-------------------------------------------------------------------------------------------------------------
(define-class general-optimization-model
	:inherit-from (object)
	:properties (
				 type 			(default nil)
				 affected-links	(default nil)
				 init-values	(default nil)
				 links			(default nil) ;;link-model-classes
				 current-path	(default nil) ;;Directory path to the current mechanism
				 main-mech-ref	(default nil)
				 label 			(default nil)
				 
				 materials-list	(get-materials-list !superior)
				 )
)

(define-method get-affected-links general-optimization-model ()
	!affected-links
)

(define-method get-materials-list general-optimization-model ()
	(loop for link in !links 
		collect (get-material-type link)
	)
)
;-------------------------------------------------------------------------------------------------------------
; END general-optimization-model definitions
;-------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------
; Class: cross-section-optimization-model
; Class for dealing with the optimization of one or more cross sections in the mechanism. The class and its 
; methods assume that all cross sections to be optimized are equal.
;-------------------------------------------------------------------------------------------------------------
(define-class cross-section-optimization-model
	:inherit-from (general-optimization-model)
	:properties (
				 type 		'cross-section
				 
				 cs-types	(remove nil (get-cs-types !superior))
				 
				 ;;Design variables
				 (width :class 'design-variable-class
					dv-value (nth 0 ^^init-values)
					)
				 (height :class 'design-variable-class
					dv-value (nth 1 ^^init-values)
					)
				 (flange-thickness :class 'design-variable-class
					dv-value (default (* 0.1 (get-dv-value ^^width)))
					)
				 (web-thickness	:class 'design-variable-class
					dv-value (default (* 0.1 (get-dv-value ^^height)))
					)
				 
				 ;;Constraints
				 deformation-constraint	(run-simulation-and-get-constraint !superior)
				 
				 ;;Objective function
				 area 					(handle-results-and-get-area !superior)
				 
				 ;FEDEM results
				 fedem-model-file		(format nil "~a\\model.fmm" ^current-path)
				 results-file-path		(format nil "~a\\deformation.asc" ^current-path)
				 results-list 			(read-results-from-file !superior)
				 largest-deformation	(get-largest-deformation !superior)
				 
				 (dummy-cs :class 'I-beam-section					 
					 width 				(get-dv-value ^^width)
					 height 			(get-dv-value ^^height)
					 flange-thickness	(get-dv-value ^^flange-thickness)
					 web-thickness		(get-dv-value ^^web-thickness)
					 )
				 
				 iteration-results-list		nil
				 best-iteration-result 		(get-best-result !superior)
				 best-result-in-each-gen	nil
				 
				 counter					0
				 first-run?					t
				 
				 parent-exploration-object 	(get-exploration-object !superior)
				 multiga-exploration-object	(get-multiga-object ^parent-exploration-object)
				 
				 ;;Can only set optimization values if the exploration-object exists
				 property-objects-list (if (not ^parent-exploration-object)
										(list
											'("Load AMOpt" (button1-parameters :load-amopt)
												ui-work-area-action-button-class)
											'("Add optmization exploration object" 
												(button1-parameters :add-exploration-object)
												ui-work-area-action-button-class)
											)
										(list
											(list (the superior width dv-value self)
												'(automatic-apply? t))
											(list (the superior width min-value self)
												'(automatic-apply? t))
											(list (the superior width max-value self)
												'(automatic-apply? t))
											""
											(list (the superior height dv-value self)
												'(automatic-apply? t))
											(list (the superior height min-value self)
												'(automatic-apply? t))
											(list (the superior height max-value self)
												'(automatic-apply? t))
											""
											(list (the superior flange-thickness dv-value self)
												'(automatic-apply? t))
											(list (the superior flange-thickness min-value self)
												'(automatic-apply? t))
											(list (the superior flange-thickness max-value self)
												'(automatic-apply? t))
											""
											(list (the superior web-thickness dv-value self)
												'(automatic-apply? t))
											(list (the superior web-thickness min-value self)
												'(automatic-apply? t))
											(list (the superior web-thickness max-value self)
												'(automatic-apply? t))
											""
											'("Set optimization variables" 
												(button1-parameters :init-optimization-variables)
												ui-work-area-action-button-class)
											)
										)
				 )
)

;-----------------------------------------------------------------------------------------------------------
; Returns the largest deformation of the mechanism simulated in FEDEM.
; Will initiate a new simulation if it's the first run or if it's the beginning of a new generation.
; For a new generation simulation, the best mechanism design from the previous generation will be simulated.
;-----------------------------------------------------------------------------------------------------------
(define-method run-simulation-and-get-constraint cross-section-optimization-model ()
	(when (or !first-run? (= (1- (the population-size (:from !multiga-exploration-object))) !counter))
		(set-best-dv-values (the))
		(change-value !first-run? nil)
		
		(when (draw-sewn-with-tri-mesh !main-mech-ref)
			(write-nastran-bdf-files !main-mech-ref)
			(write-fmm-model-file !main-mech-ref :from-opt? t)
		)
		
		(if (probe-file !results-file-path)
			(delete-file !results-file-path)
		)
		
		(run-fedem-simulation (the))
		(wait-for-fedem-results !results-file-path)
	)
	(undraw !main-mech-ref)
	(get-largest-deformation (the))
)

;------------------------------------------------------------------------------------------------------------
; This method returns the cross section area, which is the objective function of the optimization. Before it
; returns the area, however, the current state of the optimization is saved. It assumes the use of the 
; multi-objective genetic algorithm (multiga), and as such, at the end of each generation, will mesh the best 
; results in that generation, and run a FEDEM simulation on it.
;------------------------------------------------------------------------------------------------------------
(define-method handle-results-and-get-area cross-section-optimization-model ()
	(add-iteration-result (the))
	(change-value !counter (1+ !counter))
	
	(when (= (the population-size (:from !multiga-exploration-object)) !counter)
		(change-value !best-result-in-each-gen 
			(append !best-result-in-each-gen (list !best-iteration-result)))
		(change-value !counter 0)
		(change-value !best-iteration-result nil)
	)
	(get-total-area (the)) ;;Return value
)

(define-method set-best-dv-values cross-section-optimization-model ()
	(unless !first-run?
		(change-value (the width dv-value) (nth 1 !best-iteration-result))
		(change-value (the height dv-value) (nth 2 !best-iteration-result))
		(change-value (the flange-thickness dv-value) (nth 2 !best-iteration-result))
		(change-value (the web-thickness dv-value) (nth 3 !best-iteration-result))
	)
)

(define-method run-fedem-simulation cross-section-optimization-model ()
	(run-program (format nil "fedem -f ~a -solve dynamics" !fedem-model-file))
	(run-program (format nil "fedem_graphexp -curvePlotFile ~a -curvePlotType 5 -modelfile ~a" 
				!results-file-path !fedem-model-file))
)

;----------------------------------------------------------------------------------
; Function that will continue calling itself until the results from FEDEM are ready
;----------------------------------------------------------------------------------
(defun wait-for-fedem-results (results-file-path)
	(unless (probe-file results-file-path)
		(sleep 1)
		(wait-for-fedem-results results-file-path)
	)
)

;-----------------------------------------------------------------------------------------
; For each change in the design variables, this method is called, adding the current state 
; to the iteration-results-list object
;-----------------------------------------------------------------------------------------
(define-method add-iteration-result cross-section-optimization-model ()
	(change-value !iteration-results-list 
		(append !iteration-results-list 
			(list (list (get-total-area (the)) (get-dv-value !width) (get-dv-value !height) 
				(get-dv-value !flange-thickness) (get-dv-value !web-thickness)))
		)
	)
)

;------------------------------------------------------------------
; Method retrieving the best result from the iteration-results-list
;------------------------------------------------------------------
(define-method get-best-result cross-section-optimization-model ()
	(let (
			(min-area 	1.0e10)
			(min-result	nil)
		)
		(progn
			(loop for result in !iteration-results-list do
				(if (< (nth 0 result) min-area)
					(progn
						(setf min-area (nth 0 result))
						(setf min-result result)
					)
				)
			)
			min-result
		)
	)
)

;-------------------------------------------------------------------------
; Reads the result from fedem and stores all deformation entries in a list
;-------------------------------------------------------------------------
(define-method read-results-from-file cross-section-optimization-model ()
    (if (probe-file !results-file-path)
        (with-open-file (file !results-file-path :direction :input)
			(loop for line = (read-line file  nil :eof)
				until (equal line :eof)  
				for ls = (string-to-delimited-token-list line :delimiter #\tab :string-token? nil)
				if (and (numberp (nth 0 ls)) (numberp (nth 1 ls)))
					append (list (nth 1 ls))
			)
        )
		(progn
			(message (format nil "\"~a\" is not a valid file path." !results-file-path) :append? t)
			nil ;;Return value if the file does not exist
        )
    )
)

;--------------------------------------------------------------
; Retrieves the largest deformation from the fedem results list
;--------------------------------------------------------------
(define-method get-largest-deformation cross-section-optimization-model ()
	(loop for deformation in !results-list
		maximize deformation into max-deformation
		finally (return max-deformation)
	)
)

;-------------------------------------------------------------------------
; Initializes the design variable values and the objective function value, 
; from the values in the GUI
;-------------------------------------------------------------------------
(define-method init-optimization-variables cross-section-optimization-model ()
	(add-object (the continuous-variables (:from !parent-exploration-object))
		'height
		'dcms-design-variable-continuous-class
		:init-form '(
					 design-property-object (the superior superior superior height dv-value (:eval? nil))
					 initial-value 			(the dv-value (:from ^^^height))
					 max-value				(the max-value (:from ^^^height))
					 min-value				(the min-value (:from ^^^height))
					 )
	)
	(add-object (the continuous-variables (:from !parent-exploration-object))
		'width
		'dcms-design-variable-continuous-class
		:init-form '(
					 design-property-object (the superior superior superior width dv-value (:eval? nil))
					 initial-value 			(the dv-value (:from ^^^width))
					 max-value				(the max-value (:from ^^^width))
					 min-value				(the min-value (:from ^^^width))
					 )
	)
	(add-object (the continuous-variables (:from !parent-exploration-object))
		'flange-thickness
		'dcms-design-variable-continuous-class
		:init-form '(
					 design-property-object (the superior superior superior 
												flange-thickness dv-value (:eval? nil))
					 initial-value 			(the dv-value (:from ^^^flange-thickness))
					 max-value				(the max-value (:from ^^^flange-thickness))
					 min-value				(the min-value (:from ^^^flange-thickness))
					 )
	)
	(add-object (the continuous-variables (:from !parent-exploration-object))
		'web-thickness
		'dcms-design-variable-continuous-class
		:init-form '(
					 design-property-object (the superior superior superior 
												web-thickness dv-value (:eval? nil))
					 initial-value 			(the dv-value (:from ^^^web-thickness))
					 max-value				(the max-value (:from ^^^web-thickness))
					 min-value				(the min-value (:from ^^^web-thickness))
					 )
	)
	(add-object (the objectives (:from !parent-exploration-object))
		'area
		'dcms-objective-class
		:init-form '(
					 design-property-object	(the superior superior superior area (:eval? nil))
					 minimize?				t
					 )
	)
)

;---------------------------------------------------------------
; Left-click button actions for cross-section-optimization-model
;---------------------------------------------------------------					
(define-method work-area-button1-action cross-section-optimization-model (params)
	(case params
		(:init-optimization-variables
			(init-optimization-variables (the))
		)
		(:load-amopt
			(load-module "amopt")
			(amopt-global-set-configuration :main-form (get-data-model-main-form))
			(display-amopt-toolbar-form)
		)
		(:add-exploration-object
			(add-object (the) 
				'cross-section-optimization-manager-object
				'dcms-exploration-object-manager-class)
		)
	)
)

;-------------------
; Get methods below:
;-------------------
(define-method get-width cross-section-optimization-model ()
	(get-dv-value !width)
)

(define-method get-height cross-section-optimization-model ()
	(get-dv-value !height)
)

(define-method get-flange cross-section-optimization-model ()
	(get-dv-value !flange-thickness)
)

(define-method get-web cross-section-optimization-model ()
	(get-dv-value !web-thickness)
)

(define-method get-total-area cross-section-optimization-model ()
	(loop for cs-type in !cs-types
		sum (get-area !dummy-cs cs-type)
	)
)

(define-method get-cs-types cross-section-optimization-model ()
	(loop for link in !affected-links 
		append (loop for shape in (get-shapes-on-link (nth link !links))
			collect (get-cs-type shape)
		)
	)
)

;------------------------------------------------------------------------------
; Used for retrieving the exploration-object when an AMOPT model has been added
; to the main-mechanism-class
;------------------------------------------------------------------------------
(define-method get-exploration-object cross-section-optimization-model ()
	(first (children (the) :class 'dcms-exploration-object-manager-class))
)

;---------------------------------------
; Used for retrieving the multiga-object
;---------------------------------------
(define-method get-multiga-object dcms-exploration-object-manager-class ()
	(first (children (the) :class 'dcms-exploration-multiga-optimization-class))
)
;-------------------------------------------------------------------------------------------------------------
; END cross-section-optimization-model definitions
;-------------------------------------------------------------------------------------------------------------









	
	
	
	
	