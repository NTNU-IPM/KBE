(define-class general-optimization-model
	:inherit-from (object)
	:properties (
				 type 			(default nil)
				 affected-links	(default nil)
				 init-values	(default nil)
				 links			(default nil)
				 current-path	(default nil) ;;Directory path to the current mechanism
				 label 			(default nil)
				 )
)

(define-method get-affected-links general-optimization-model ()
	!affected-links
)

(define-class cross-section-optimization-model
	:inherit-from (general-optimization-model)
	:properties (
				 type 				'cross-section
				 
				 cs-types			(get-cs-types !superior)
				 
				 width				(nth 0 ^init-values)
				 height				(nth 1 ^init-values)
				 flange-thickness	(default (* 0.1 ^width))
				 web-thickness		(default (* 0.1 ^height))
				 
				 area 				(probe-file-and-get-area !superior)
				 
				 (dummy-cs :class 'cross-section-model
					 width 				^^width
					 height 			^^height
					 flange-thickness	^^flange-thickness
					 web-thickness		^^web-thickness
					 )
				 
				 iteration-results-list	nil
				 best-result 			(get-best-result !superior)
				 
				 counter				0
				 )
)

(define-method get-width cross-section-optimization-model ()
	!width
)

(define-method get-height cross-section-optimization-model ()
	!height
)

(define-method get-flange cross-section-optimization-model ()
	!flange-thickness
)

(define-method get-web cross-section-optimization-model ()
	!web-thickness
)

(define-method get-total-area cross-section-optimization-model ()
	(loop for cs-type in !cs-types
		sum (get-area !dummy-cs cs-type)
	)
)

(define-method get-cs-types cross-section-optimization-model ()
	(loop for link in !affected-links 
		append (loop for shape in (get-shapes-on-link (nth link !links))
			collect (get-cs-type shape)
		)
	)
)

(define-method probe-file-and-get-area cross-section-optimization-model ()
	(while (not (probe-file (format nil "~a\\dummy.txt" !current-path)))
		(sleep 1)
	)
	(progn
		(add-iteration-result (the))
		(get-total-area (the))
	)
)
	
(define-method add-iteration-result cross-section-optimization-model ()
	(change-value !iteration-results-list 
		(append !iteration-results-list 
			(list (list (get-total-area (the)) !width !height !flange-thickness !web-thickness))
		)
	)
)

(define-method get-best-result cross-section-optimization-model ()
	(let (
			(min-area 	1.0e10)
			(min-result	nil)
		)
		(progn
			(loop for result in !iteration-results-list do
				(if (< (nth 0 result) min-area)
					(progn
						(setf min-area (nth 0 result))
						(setf min-result result)
					)
				)
			)
			min-result
		)
	)
)
	
	
	
	
	