(define-class general-optimization-model
	:inherit-from (object)
	:properties (
				 type 			(default nil)
				 affected-links	(default nil)
				 init-values	(default nil)
				 links			(default nil)
				 label 			(default nil)
				 )
)

(define-method get-affected-links general-optimization-model ()
	!affected-links
)

(define-class cross-section-optimization-model
	:inherit-from (general-optimization-model)
	:properties (
				 type 				'cross-section
				 
				 cs-types			(get-cs-types !superior)
				 
				 width				(nth 0 ^init-values)
				 height				(nth 1 ^init-values)
				 flange-thickness	(default (* 0.1 ^width))
				 web-thickness		(default (* 0.1 ^height))
				 area				(get-total-area !superior)
				 (dummy-cs :class 'cross-section-model
					 width 				^^width
					 height 			^^height
					 flange-thickness	^^flange-thickness
					 web-thickness		^^web-thickness
					 )
				 )
)

(define-method get-width cross-section-optimization-model ()
	!width
)

(define-method get-height cross-section-optimization-model ()
	!height
)

(define-method get-flange cross-section-optimization-model ()
	!flange-thickness
)

(define-method get-web cross-section-optimization-model ()
	!web-thickness
)

(define-method get-total-area cross-section-optimization-model ()
	(loop for cs-type in !cs-types
		sum (get-area !dummy-cs cs-type)
	)
)

(define-method get-cs-types cross-section-optimization-model ()
	(loop for link in !affected-links 
		append (loop for shape in (get-shapes-on-link (nth link !links))
			collect (get-cs-type shape)
		)
	)
)
