;-------------------------------------------------------------------------------------------------------------
; Class: shape-model
; Defines the shape properties of a member
;------------------------------------------------------------------------------------------------------------- 
(define-class shape-model
  :inherit-from (object)
  :properties (
               label nil
			   link-ref (default 'default)
               sweep-index (default 'default)
               cross-section-type (read-from-string (remove "-section" (write-to-string (default 'circular-section))))
               solid-dimensions '(0.04 0.04)
               point-list nil
               weight-list nil
               )
  )
;-------------------------------------------------------------------------------------------------------------
; END shape-model definitions
;-------------------------------------------------------------------------------------------------------------

;-------------------------------------------------------------------------------------------------------------
; Class: link-geometry-class 
; Generates a link's total geometry, including joints
;-------------------------------------------------------------------------------------------------------------
(define-class link-geometry-class
  :inherit-from (tagging-object geometry-with-split-periodic-faces-class)
  :properties (
			   property-objects-list (list
										"Link sewn with incident joint element"
										(list (the superior cross-section-type self) 
										'(automatic-apply? t))
										'("Set all cross-sections" (button1-parameters :set-c button3-parameters :unset)
										ui-work-area-action-button-class)
										
										'("Draw" (button1-parameters :draw-sewn-geometry)
										ui-work-area-action-button-class)
										'("Draw with mesh" (button1-parameters :draw-with-mesh)
										ui-work-area-action-button-class)
										'("Undraw" (button1-parameters :undraw-sewn)
										ui-work-area-action-button-class)
										)
											
               source-object 			^difference-element ;; Used for geometry-with-split-periodic-faces-class
			   
               max-element-size 		0.02
               tag-dimensions 			'(1 2 3)
               tag-attributes 			(list ^max-element-size .01 0 0.1 0 20.0 1.0e-5)
               default-shape 			(let(
											(def (loop for shape in (children ^^^shapes :class 'shape-model)
													 when (and
														   (equal 'default (the sweep-index (:from shape)))
														   (equal ^link-index (the link-ref (:from shape)))
														   )
													 do (return shape)
													 )
												   )
											  )
										   (if def def ^^default-shape)
										   )
               shapes-on-link 			(let (
											  (shape-list (make-sequence 'list (length ^constraint-connection-combination) :initial-element ^default-shape) )
											 )
											(loop for shape in (children ^^^shapes :class 'shape-model)
											  when (and (equal ^link-index (the link-ref (:from shape))) (not (equal 'default (the sweep-index (:from shape)))) )
											  do (replace shape-list (list shape) :start1 (the sweep-index (:from shape)) )
											  finally (return shape-list)
											  )
											)

               constraint-connection-combination	(connection-combinations (length ^constraints-incident-on-link-list))
               
               surfaces-ref-list 					(children ^surfaces :class 'surface-model :test '(and !geom !display?))
			   
               members-ref-list						(children ^sweeps :class 'member-solid-model)
               visible-members-ref-list 			(children ^sweeps :class 'member-solid-model :test '!display?) ;; only include sweeps which are not "turned off"
			   mating-surface-list 					(append (loop for c in ^constraints-incident-on-link-list
														collect (the mating-surface-nodes (:from c))
														))
			   
               union-list 							(loop for constraint in ^constraints-incident-on-link-list
														append (the union-list (:from constraint))
														)
               difference-list 						(loop for constraint in ^constraints-incident-on-link-list
														append (the difference-list (:from constraint))
														)
			   ;;; List of the final geometry
               object-list 							(append
														(list ^imprint-union-element)
														^difference-list
														)
			   
			   ;;; simplify? t removes common boundaries in the geometry
			   ;;; simplify? nil keeps them
			   simplify? 							nil
               
               (imprint-union-element :class '(tagging-object geometry-with-split-periodic-faces-class)
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^max-element-size .01
                                        0 0.1 0 20.0 1.0e-5)
                   source-object ^^union-element
                   )
			   ;;; Imprints the union-element with the 
               (imprint-constraint-points :class '(tagging-object imprint-class)
                   target-object ^^imprint-union-element
                   tool-object-list (loop for c in ^constraints-incident-on-link-list
                                      collect (the point-ref (:from c))
                                      )
                   )
               (difference-element :class '(tagging-object difference-object)
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^max-element-size .01
                                        0 0.1 0 20.0 1.0e-5)
                   object-list (append
                                (list ^union-element)
;;;                             (list ^imprint-union-element)
                                ^difference-list
                                )
                   simplify? t
                   )
                                
               (union-element :class '(tagging-object union-object)
                   tag-dimensions '(1 2 3)
                   tag-attributes (list ^max-element-size .01
                                        0 0.1 0 20.0 1.0e-5)
                   object-list (append  ^surfaces-ref-list
;;;                                         (list ^sewn-links)
                                        ^visible-members-ref-list
                                        ^^union-list)
				   simplify? t
                   )
				render 'shaded
				
				;; This list collects the members that can be drawed.
				;; If it is empty, this links will not be considered in the mesh or analysis
				drawable-members-ref-list 	(loop for member in ^members-ref-list 
												if (the geom (:from member)) 
													collect member
												)
               )
  :subobjects (
               (surfaces :class 'surfaces-on-link-collection
				   members-list ^^members-ref-list
                   )
               (sweeps :class 'members-on-link-collection
                   )
               )
  )
  
(define-method has-line-cross-section link-geometry-class ()
	(loop for shape in !shapes-on-link do
		(if (equal 'line (the cross-section-type (:from shape))) 
			(return t)
		)
		finally (return nil)
	)
)

;----------------------------------------------------------
; Returns all possible connections with all incident joints
; Input: Number of incident joints
;----------------------------------------------------------
(defun connection-combinations (n)
	(loop for j from 0 to (- n 2)
     append (loop for k from (1+ j) to (1- n)
             collect (list j k)                   
          )
     )
   )

;-------------------------------------------------
; Left-click button methods for member-solid-model
;-------------------------------------------------
(define-method work-area-button1-action link-geometry-class (params)
  (case params
	(:set-c
		(loop for m in (the members-ref-list (:from self)) do
				(change-value (the cross-section-type self (:from m)) !cross-section-type)
			)
		
	)
	;;; Sewn geometry refers to the union of a member and a joint
    (:draw-sewn-geometry
		(draw self :draw-subobjects? nil)
     )
    (:undraw-sewn
		 (undraw self :subobjects? t)
		 (undraw (the superior link-mesh-model))
     )
	(:draw-with-mesh
		(draw self :draw-subobjects? nil)
		(with-error-handler (:show-system-error? t)
			(draw (the superior link-mesh-model))
		)
	 )
    )
  )  
;-------------------------------------------------------------------------------------------------------------
; END link-geometry-class definitions
;------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------------------
; Class: link-model-class 
; Used to hold the link geometry, its mesh and the analysis as subobjects
;-------------------------------------------------------------------------------------------------------------
(define-class link-model-class
  :inherit-from (object)
  :properties (
               ;; properties set from parent init-form
               label											nil
			   constraints-incident-on-link-list 				nil ;;List of joint-element-models
               connection-between-2-constraints-combinations 	(list-combinations ^constraints-incident-on-link-list)
               link-index 										nil
			   
			   has-line-cross-section?							(has-line-cross-section ^link-geometry)
			   )
  :subobjects (
               (link-geometry :class 'link-geometry-class
                   )
               (link-mesh-model :class 'link-mesh-class
                   geometry-model-object	^link-geometry
                   mesh-database 			^^mesh-database
				   link-model 				^superior
                   )
               (analysis :class 'analysis-link-model-class
                   mesh-model-object ^^link-mesh-model
                   )
               )
  )
  
(define-method get-non-open-constraints-incident-on-link-list link-model-class ()
	(when !constraints-incident-on-link-list
		(loop for joint-element in !constraints-incident-on-link-list do
			if (not (string-equal "open" (get-constraint-type joint-element)))
				collect joint-element
		)
	)
)

(define-method is-link-drawable? link-model-class ()
 	(> (length (the drawable-members-ref-list (:from !link-geometry))) 0)
)
 
(define-method are-all-members-displayed? link-model-class ()
 	(> (length (the visible-members-ref-list (:from !link-geometry))) 0)
)
 
(define-method get-mesh-model-object link-model-class ()
 	!link-mesh-model
)
 
;-----------------------------------------------------------------
; Returns all possible connections with all incident joints
; Input: List of incident joints, OR the number of incident joints
;-----------------------------------------------------------------
(defun list-combinations (p)
  (let (
        (l (if (typep p 'list) p (if (typep p 'fixnum) (loop for i from 0 to (1- p) collect i) (list ) ) ) )
        (n (length l))
        )
    (loop for j from 0 to (- n 2)
      append (loop for k from (1+ j) to (1- n)
               collect (list (nth j l) (nth k l))                   
               )
      )
    )
  )
;-------------------------------------------------------------------------------------------------------------
; END link-model-class definitions
;-------------------------------------------------------------------------------------------------------------   