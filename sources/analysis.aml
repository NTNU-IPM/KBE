;;; -----------------------------
;;; ANALYSIS DEFINITIONS
;;; -----------------------------

;;; Class responsible for meshing
(define-class link-mesh-class
  :inherit-from (object)
  :properties (
               mesh-object ^link-mesh
			   open-constraints-list (loop for constraint in ^^constraints-incident-on-link-list
											if (string-equal "open" (get-constraint-type constraint))
												collect constraint
											)
			   non-open-constraints-list  (loop for constraint in ^^constraints-incident-on-link-list do
											if (not (string-equal "open" (get-constraint-type constraint)))
												collect constraint
											)
			   joint-center-node-list	(loop for c in !non-open-constraints-list
											collect (the joint-center-node (:from c))
											)
			   
			   
			   ;;; Sets the element size to half of the smallest dimension of a link's joints
			    ;element-size (let (
				;				  (min-elem nil)
				;				  )
				;				   (loop for constraint in ^^constraints-incident-on-link-list
				;							if (not (string-equal "open" (the constraint-type (:from constraint)))) do
				;							(let (
				;								  (mw (if (= (the max-width (:from constraint)) 0) nil (the max-width (:from constraint))))   ;;max might be 0 due to open constraints
				;								  (mh (if (= (the max-height (:from constraint)) 0) nil (the max-height (:from constraint))))
				;								 )
				;								(if (not min-elem)
				;									(setf min-elem (min-or-nil mw mh))
				;									(if (< min-elem (min-or-nil mw mh))
				;										(setf min-elem (min-or-nil mw mh))))))
				;					(/ min-elem 2))
				;						
               geometry-model-object (default nil)
               (node-set :class 'analysis-node-set-class
                   query-objects-list (append (list (the nodes-query (:from ^^tet-mesh))) ^joint-center-node-list)
                   )
               )
  :subobjects (
               (mesh-db :class 'mesh-database-class
					)
			   (link-mesh :class 'paver-mesh-class
					object-to-mesh ^^geometry-model-object
					mesh-database-object ^^mesh-db
					element-shape :tri
					;element-size-method 2
					)
			   (tet-mesh :class 'tet-mesh-class
					mesh-database-object ^^mesh-db
					object-to-mesh (the superior superior link-mesh surface-elements-query)
					)
               ;; Link mesh query
			   (link-mesh-surface-elements :class 'mesh-elements-2d-query-class
                   tagged-object-list (append
									   (the union-list (:from ^^geometry-model-object))
                                       (the visible-members-ref-list (:from  ^^geometry-model-object))
                                       (the object-list (:from ^^geometry-model-object))
									   )
                   color 'cyan
                   mesh-object ^^link-mesh
                   )
               (link-mesh-solid-elements :class 'mesh-elements-3d-query-class
                   tagged-object-list (append
                                       (the union-list (:from ^^geometry-model-object))
                                       (the visible-members-ref-list (:from  ^^geometry-model-object))
                                       )
                   mesh-object ^^tet-mesh
                   )
			   (mating-surface-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (the mating-surface-list (:from ^^geometry-model-object))
                   mesh-object ^^link-mesh
                   )
               (fixed-nodes :class 'mesh-nodes-query-class
                   tagged-object-list (list
                                       (the fixed-edge (:from ^^geometry-model-object))
                                       )
;                    mesh-object ^^link-mesh
                   )
               (loaded-nodes :class 'mesh-query-nodes-from-interface-class
                   ;interface-object (the point-ref (:from (the constraint-element (:from (nth 0 ^^solid-constraints-ref-list) ))))
                   mesh-object ^^link-mesh
                   )
			   (rbe2-list :class 'RBE2-collection)
               )
  )

(define-method get-tet-mesh-entities-list link-mesh-class ()
	(when !tet-mesh
		(the tet-mesh nodes-query mesh-entities-list))
	)
  
(define-method get-all-joint-center-nodes link-mesh-class ()
	nil
	)

(define-method get-link-solid-mesh-elements-query-objects-list link-mesh-class ()
  (when (the elements-query (:from !tet-mesh :error nil :relation nil))
    (list (the elements-query (:from !tet-mesh))))
  )
  
(define-method get-rbe2-constraints-list link-mesh-class ()
	(when !non-open-constraints-list
		!non-open-constraints-list)
	)

(define-method get-link-mesh-db link-mesh-class ()
	!mesh-db
	)
	
(define-class RBE2-collection
	:inherit-from (series-object)
	:properties (
				 constraints-list 	(get-rbe2-constraints-list ^^link-mesh-model)
				 link-mesh-db 		(get-link-mesh-db ^^link-mesh-model)
				 
				 class-expression 	'analysis-rigid-body-element-type-1-class
				 series-prefix 		'rbe2
				 quantity 			(length ^^non-open-constraints-list)
				 init-form '(
                             ;constraint-type (the constraint-type (:from (nth ^index ^^non-open-constraints-list)))
							 independent-node-query-object 		(the joint-center-node (:from (nth ^index ^constraints-list)))
							 dependent-nodes-query-object 		(the mating-surface-nodes (:from (nth ^index ^constraints-list)))
							 dependent-degrees-of-freedom-list 	'(1 2 3 4 5 6)
							 create-new-independent-node? 		nil ;; The node is added in the node-set manually
                             id 								(+ 1 ^index) ;; Have to set the id manually, as default is 1 for each instance
							 )
				 )
	)


	
;;; Returns the smallest number. If both are nil then return 10e10, if one is nil, then the other.  
(defun min-or-nil (p q)
	(if (or (not p) (not q))
		(if (and (not p) (not q))
			10e10 		;;Random big number if both are nil, just for comparison reasons
			(if p p q)
		)
		(min p q)
	)
)

(define-method get-rigid-body-element-objects-list link-mesh-class ()
	(when !rbe2-list 
		(children !rbe2-list :class 'analysis-rigid-body-element-type-1-class))
	)

(define-class analysis-link-model-class
  :inherit-from (analysis-model-class)
  :properties (
               mesh-model-object 				nil ;;This property is set on instantiation as a link-mesh-class
               mesh-database-object 			^^mesh-database
               
               z-load 							(default -100.0)
               analysis-type 					:linear-static
               load-case-objects-list 			(list ^load-case-1)
               material-catalog-object 			^material-catalog
               materials-list 					(list 'steel)
               property-set-objects-list 		(list ^link-2D-material-properties ^link-3D-material-properties)
               
               element-set-2d-objects-list 		(list ^link-analysis-surface-elements)
               element-set-3d-objects-list 		(list ^link-analysis-solid-elements)

               mesh-object 						(the link-mesh (:from ^mesh-model-object))
               node-set-objects-list 			(list (the node-set (:from ^mesh-model-object)) )
			   
			   rigid-body-element-objects-list	(get-rigid-body-element-objects-list ^mesh-model-object)
               )
  :subobjects (
               (material-catalog :class 'material-catalog-class
                   )
               (link-2D-material-properties :class 'analysis-property-set-2d-type-1-class
                   material-catalog-object ^^material-catalog
				   material-name "Steel"
                   thickness 0.3
				   )
               (link-3D-material-properties :class 'analysis-property-set-3d-type-1-class
					material-catalog-object ^^material-catalog
				    material-name "Steel"
					)
               (link-analysis-surface-elements :class 'analysis-element-set-2d-type-1-class
                   query-objects-list (list
                                       (the link-mesh-surface-elements (:from ^^mesh-model-object))
                                       )
                   property-set-object ^^link-2D-material-properties
				   )
               (link-analysis-solid-elements :class 'analysis-element-set-3d-type-1-class
                   query-objects-list (get-link-solid-mesh-elements-query-objects-list ^^mesh-model-object)
                   property-set-object ^^link-3D-material-properties
                   )
               
			   (fixed-nodes-constraint :class 'analysis-constraint-displacement-class
                   target-object (the fixed-nodes (:from ^^mesh-model-object))
                   tx 0.0
                   ty 0.0
                   tz 0.0
                   mx 0.0
                   my 0.0
                   mz 0.0
                   )
               (nodal-load :class 'analysis-load-force-nodal-class
                   target-object (the loaded-nodes
                                   (:from ^^mesh-model-object))
                   load-vector (list 0.0 0.0 ^^z-load)
                   )
               (load-case-1 :class 'analysis-load-case-class
;;;                    load-objects-list (list ^nodal-load)
;;;                    constraint-objects-list (list ^^fixed-nodes-constraint)
				   )
               (nastran-interface :class 'nastran-analysis-class
                   analysis-model-object ^superior
                   model-name (format nil "~a - ~a" (the folder (:from ^^mechanism-selection)) (the version-name (:from ^^version-selection)))
                   nastran-file-name (concatenate (write-to-string  (object-name ^^superior)) ".bdf")
                   nastran-version (nth 2 '(:nei-nastran :msc-nastran :nx-nastran))
                   )
               )
  )

 
;;; -----------------------------
;;; END ANALYSIS DEFINITIONS
;;; -----------------------------  
